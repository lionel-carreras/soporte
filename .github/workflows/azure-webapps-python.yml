# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the PYTHON_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: CI â†’ ZIPDeploy a Azure App Service

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_WEBAPP_NAME: soportebrio
      AZURE_WEBAPP_PUBLISH_USER: ${{ secrets.AZURE_WEBAPP_PUBLISH_USER }}
      AZURE_WEBAPP_PUBLISH_PASS: ${{ secrets.AZURE_WEBAPP_PUBLISH_PASS }}
      DJANGO_SETTINGS_MODULE: config.settings
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout del cÃ³digo
        run: |
          git init
          git remote add origin https://github.com/lionel-carreras/soporte.git
          git fetch --depth=1 origin master
          git checkout FETCH_HEAD

      - name: Instalar Python y crear virtualenv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip

      - name: Instalar dependencias
        run: |
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Ejecutar migraciones de Django
        run: |
          source .venv/bin/activate
          python manage.py migrate --noinput

      - name: Recoger archivos estÃ¡ticos
        run: |
          source .venv/bin/activate
          python manage.py collectstatic --noinput

      - name: Empaquetar aplicaciÃ³n para deploy
        run: |
          zip -r app.zip . \
            -x ".git/*" ".venv/*" "media/*"

      - name: Desplegar a Azure (ZIPDeploy)
        run: |
          echo "ðŸ“¦ ZIPDeploy a https://${AZURE_WEBAPP_NAME}.scm.azurewebsites.net/api/zipdeploy"
          curl -sS -X POST \
            -u "${AZURE_WEBAPP_PUBLISH_USER}:${AZURE_WEBAPP_PUBLISH_PASS}" \
            "https://${AZURE_WEBAPP_NAME}.scm.azurewebsites.net/api/zipdeploy?isAsync=true" \
            -T app.zip \
            -H "Cache-Control: no-cache" \
            -H "Content-Type: application/zip"

